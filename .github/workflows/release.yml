name: Release

on:
  push:
    branches:
      - dev
      - main

permissions:
  contents: write

jobs:
  # Check for package changes
  check-package-changes:
    runs-on: ubuntu-latest
    outputs:
      lasereyes_changed: ${{ steps.check.outputs.lasereyes_changed }}
      lasereyes_core_changed: ${{ steps.check.outputs.lasereyes_core_changed }}
      lasereyes_react_changed: ${{ steps.check.outputs.lasereyes_react_changed }}
      lasereyes_vue_changed: ${{ steps.check.outputs.lasereyes_vue_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all branches
        run: git fetch --all

      - name: Determine diff comparison strategy
        id: diff-strategy
        run: |
          if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
            echo "diff_target=HEAD^1" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "diff_target=HEAD^1" >> $GITHUB_ENV
          fi

      - name: Check if packages changed
        id: check
        run: |
          diff_target=${{ env.diff_target }}

          if git diff --name-only --diff-filter=AM $diff_target HEAD -- packages/lasereyes/ | grep -q '^packages/lasereyes/'; then
            echo "lasereyes_changed=true" >> $GITHUB_ENV
            echo "lasereyes_changed=true" >> $GITHUB_OUTPUT
          else
            echo "lasereyes_changed=false" >> $GITHUB_ENV
            echo "lasereyes_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only --diff-filter=AM $diff_target HEAD -- packages/lasereyes-core/ | grep -q '^packages/lasereyes-core/'; then
            echo "lasereyes_core_changed=true" >> $GITHUB_ENV
            echo "lasereyes_core_changed=true" >> $GITHUB_OUTPUT
          else
            echo "lasereyes_core_changed=false" >> $GITHUB_ENV
            echo "lasereyes_core_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only --diff-filter=AM $diff_target HEAD -- packages/lasereyes-react/ | grep -q '^packages/lasereyes-react/'; then
            echo "lasereyes_react_changed=true" >> $GITHUB_ENV
            echo "lasereyes_react_changed=true" >> $GITHUB_OUTPUT
          else
            echo "lasereyes_react_changed=false" >> $GITHUB_ENV
            echo "lasereyes_react_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only --diff-filter=AM $diff_target HEAD -- packages/lasereyes-vue/ | grep -q '^packages/lasereyes-vue/'; then
            echo "lasereyes_vue_changed=true" >> $GITHUB_ENV
            echo "lasereyes_vue_changed=true" >> $GITHUB_OUTPUT
          else
            echo "lasereyes_vue_changed=false" >> $GITHUB_ENV
            echo "lasereyes_vue_changed=false" >> $GITHUB_OUTPUT
          fi

  # Bump RC version in dev branch only if necessary
  bump-rc-in-dev:
    runs-on: ubuntu-latest
    needs: check-package-changes
    if: github.ref == 'refs/heads/dev' &&
      (needs.check-package-changes.outputs.lasereyes_changed == 'true' ||
      needs.check-package-changes.outputs.lasereyes_core_changed == 'true' ||
      needs.check-package-changes.outputs.lasereyes_react_changed == 'true' ||
      needs.check-package-changes.outputs.lasereyes_vue_changed == 'true')
    environment: prod
    steps:
      # (Bump RC steps as in the original workflow)
      ...

  promote-to-stable-in-main:
    runs-on: ubuntu-latest
    needs: check-package-changes
    if: github.ref == 'refs/heads/main'
    environment: prod
    steps:
      # (Promote to stable steps as in the original workflow)
      ...

  # Generate release notes for dev branch
  generate-release-notes-dev:
    runs-on: ubuntu-latest
    needs: bump-rc-in-dev
    if: github.ref == 'refs/heads/dev' && (needs.bump-rc-in-dev.result == 'success' || needs.bump-rc-in-dev.result == 'skipped')
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai==0.28 requests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Generate git diff
        run: |
          PREV_COMMIT=$(git rev-parse HEAD^1)
          git diff $PREV_COMMIT HEAD > changes.diff

      - name: Extract new version
        id: extract-version
        run: |
          NEW_VERSION=$(node -p "require('./packages/lasereyes/package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Generate release notes with GPT
        run: |
          set -e
          python3 scripts/generate_release_notes.py ${{ env.NEW_VERSION }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Generate release notes for main branch
  generate-release-notes-main:
    runs-on: ubuntu-latest
    needs: promote-to-stable-in-main
    if: github.ref == 'refs/heads/main' && (needs.promote-to-stable-in-main.result == 'success' || needs.promote-to-stable-in-main.result == 'skipped')
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai==0.28 requests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Generate git diff
        run: |
          PREV_COMMIT=$(git rev-parse HEAD^1)
          git diff $PREV_COMMIT HEAD > changes.diff

      - name: Extract new version
        id: extract-version
        run: |
          NEW_VERSION=$(node -p "require('./packages/lasereyes/package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Generate release notes with GPT
        run: |
          set -e
          python3 scripts/generate_release_notes.py ${{ env.NEW_VERSION }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Configure git user
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Concatenate release notes
        if: github.ref == 'refs/heads/main'
        run: |
          echo -e "\n$(cat detailed_release_notes.md)\n$(cat RELEASE_NOTES.md)" > RELEASE_NOTES.md
          git add RELEASE_NOTES.md
          git commit -m "Updated RELEASE_NOTES.md with new release"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        with:
          tag_name: "${{ github.ref }}"
          release_name: "Release ${{ github.ref }}"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Merge main into dev to sync branches
  merge-main-into-dev:
    runs-on: ubuntu-latest
    needs: generate-release-notes-main
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@8.6.6 --activate

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Configure git user
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Checkout dev branch
        run: |
          git checkout dev
          git fetch origin
          git merge -s recursive -X theirs origin/main || echo "Handled merge conflicts with 'theirs' strategy"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push merge to dev
        run: |
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
