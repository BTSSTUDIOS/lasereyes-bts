name: Release

on:
  push:
    branches:
      - dev
      - main
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@8.6.6 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Fetch all branches
        run: git fetch --all

      - name: Check if lasereyes package changed
        id: check_lasereyes_changes
        run: |
          if git diff --name-only HEAD^1 HEAD | grep -q 'packages/lasereyes/'; then
            echo "changed=true" >> $GITHUB_ENV
          else
            echo "changed=false" >> $GITHUB_ENV
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        if: ${{ env.changed == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install openai==0.28

      - name: Bump version for lasereyes (dev)
        if: ${{ env.changed == 'true' && github.ref == 'refs/heads/dev' }}
        run: |
          cd packages/lasereyes
          npm version prerelease --preid=rc
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit version bumps and changelog for dev
        if: ${{ env.changed == 'true' && github.ref == 'refs/heads/dev' }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "RC version bump for lasereyes"
          git pull --rebase origin dev
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version for lasereyes (main)
        if: ${{ env.changed == 'true' && github.ref == 'refs/heads/main' }}
        run: |
          cd packages/lasereyes
          npm version patch
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit version bumps and changelog for main
        if: ${{ env.changed == 'true' && github.ref == 'refs/heads/main' }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout main
          git pull origin main
          git add .
          git commit -m "Version bump after merge to main for lasereyes"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync main to dev and bump dev version after merge
        if: ${{ github.ref == 'refs/heads/main' && env.changed == 'true' }}
        run: |
          git checkout dev
          git pull origin dev
          git merge origin/main
          cd packages/lasereyes
          npm version prerelease --preid=rc
          cd ../../
          git add .
          git commit -m "Bump dev version after main sync"
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate git diff
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          PREV_COMMIT=$(git rev-parse HEAD^1)
          git diff $PREV_COMMIT HEAD > changes.diff

      - name: Check if OPENAI_API_KEY is set
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "OPENAI_API_KEY is not set"
            exit 1
          else
            echo "OPENAI_API_KEY is set"
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Generate release notes with GPT
        if: ${{ env.changed == 'true' && github.ref == 'refs/heads/main' }}
        run: |
          python3 scripts/generate_release_notes.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Concatenate release notes
        if: ${{ env.changed == 'true' && github.ref == 'refs/heads/main' }}
        run: |
          echo -e "\n$(cat detailed_release_notes.md)\n$(cat RELEASE_NOTES.md)" > RELEASE_NOTES.md
          git add RELEASE_NOTES.md
          git commit -m "Updated RELEASE_NOTES.md with new release"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: ${{ env.changed == 'true' && github.ref == 'refs/heads/main' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.bump.outputs.new_version }}"  # Or a manually defined tag
          release_name: "Release v${{ steps.bump.outputs.new_version }}"
          body_path: detailed_release_notes.md
          draft: false
          prerelease: false

      - name: Post Setup pnpm
        run: echo "Workflow completed!"
