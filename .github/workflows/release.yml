name: Release

on:
  push:
    branches:
      - dev
      - main
permissions:
  contents: write

jobs:
  # Step 1: Bumping versions for the dev branch (pre-release)
  bump-versions-dev:
    if: github.ref == 'refs/heads/dev'  # Only run this on dev pushes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@8.6.6 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Bump version for lasereyes-core (dev)
        if: ${{ env.lasereyes_core_changed == 'true' }}
        run: |
          cd packages/lasereyes-core
          npm version prerelease --preid=rc
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version for lasereyes-react (dev)
        if: ${{ env.lasereyes_react_changed == 'true' }}
        run: |
          cd packages/lasereyes-react
          npm version prerelease --preid=rc
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version for lasereyes (dev)
        if: ${{ env.lasereyes_changed == 'true' || env.lasereyes_core_changed == 'true' || env.lasereyes_react_changed == 'true' }}
        run: |
          cd packages/lasereyes
          npm version prerelease --preid=rc
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest changes from dev
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git pull origin dev

      - name: Commit version bumps for dev
        if: ${{ env.lasereyes_changed == 'true' || env.lasereyes_core_changed == 'true' || env.lasereyes_react_changed == 'true' }}
        run: |
          git add .
          git commit -m "RC version bump for packages"
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 2: Bumping versions for main branch (patch releases)
  bump-versions-main:
    if: github.ref == 'refs/heads/main'  # Only run this on main pushes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@8.6.6 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Bump version for lasereyes-core (main)
        if: ${{ needs.release.outputs.lasereyes_core_changed == 'true' }}
        run: |
          cd packages/lasereyes-core
          npm version patch
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version for lasereyes-react (main)
        if: ${{ needs.release.outputs.lasereyes_react_changed == 'true' }}
        run: |
          cd packages/lasereyes-react
          npm version patch
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version for lasereyes (main)
        if: ${{ needs.release.outputs.lasereyes_changed == 'true' || needs.release.outputs.lasereyes_core_changed == 'true' || needs.release.outputs.lasereyes_react_changed == 'true' }}
        id: bump_lasereyes
        run: |
          cd packages/lasereyes
          new_version=$(npm version patch)
          echo "lasereyes_version=${new_version}" >> $GITHUB_ENV
          echo "::set-output name=lasereyes_version::${new_version}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 3: Sync back to dev and bump versions with rc
  sync-dev-and-bump:
    if: github.ref == 'refs/heads/main'  # Only run after a main release
    needs: bump-versions-main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup pnpm
        run: |
          corepack enable
          corepack prepare pnpm@8.6.6 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Sync main to dev
        run: |
          git checkout dev
          git pull origin dev
          git merge -X theirs origin/main

      - name: Bump version for lasereyes-core (rc)
        if: ${{ needs.release.outputs.lasereyes_core_changed == 'true' }}
        run: |
          cd packages/lasereyes-core
          npm version prerelease --preid=rc
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version for lasereyes-react (rc)
        if: ${{ needs.release.outputs.lasereyes_react_changed == 'true' }}
        run: |
          cd packages/lasereyes-react
          npm version prerelease --preid=rc
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version for lasereyes (rc)
        if: ${{ needs.release.outputs.lasereyes_changed == 'true' || needs.release.outputs.lasereyes_core_changed == 'true' || needs.release.outputs.lasereyes_react_changed == 'true' }}
        run: |
          cd packages/lasereyes
          npm version prerelease --preid=rc
          cd ../../
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push changes to dev
        run: |
          git add .
          git commit -m "Bumped version to next RC after release"
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 4: Generate release notes and create GitHub release
  generate-release:
    if: github.ref == 'refs/heads/main'  # Only run for main releases
    needs: bump-versions-main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai==0.28
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Generate git diff
        run: |
          PREV_COMMIT=$(git rev-parse HEAD^1)
          git diff $PREV_COMMIT HEAD > changes.diff

      - name: Generate release notes with GPT
        run: |
          echo "Running generate_release_notes.py with version: ${{ needs.bump-versions-main.outputs.lasereyes_version }}"
          python3 scripts/generate_release_notes.py "${{ needs.bump-versions-main.outputs.lasereyes_version }}"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Configure git user
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Concatenate release notes
        run: |
          git checkout main
          git pull origin main
          echo -e "\n$(cat detailed_release_notes.md)\n$(cat RELEASE_NOTES.md)" > RELEASE_NOTES.md
          git add RELEASE_NOTES.md
          git commit -m "Updated RELEASE_NOTES.md with new release"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure single "v" in tag_name
        id: ensure_v
        run: |
          if [[ "${{ needs.bump-versions-main.outputs.lasereyes_version }}" == v* ]]; then
            echo "tag_name=${{ needs.bump-versions-main.outputs.lasereyes_version }}" >> $GITHUB_ENV
          else
            echo "tag_name=v${{ needs.bump-versions-main.outputs.lasereyes_version }}" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        if: steps.ensure_v.outcome == 'success'
        uses: actions/create-release@v1
        with:
          tag_name: "${{ env.tag_name }}"
          release_name: "Release ${{ env.tag_name }}"
          body_path: detailed_release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post Setup pnpm
        run: echo "Workflow completed!"
